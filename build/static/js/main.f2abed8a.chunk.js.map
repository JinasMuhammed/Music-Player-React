{"version":3,"sources":["components/About.js","components/sub/Search.js","components/sub/Artist.js","components/sub/Track.js","components/Music.js","components/Contact.js","App.js","serviceWorker.js","index.js"],"names":["About","className","Component","Search","state","artistQuery","searchArtist","props","search","handleKeyPress","event","key","updateArtistHistory","setState","target","value","type","placeholder","onChange","this","onKeyPress","onClick","Artist","artist","name","followers","genres","images","src","url","style","width","alt","total","join","Track","playing","audio","playingPreviewUrl","playAudio","previewUrl","Audio","pause","play","trackIcon","track","preview_url","tracks","map","id","album","API_ADDRESS","Music","fetch","then","response","json","console","log","artists","items","catch","error","alert","message","Contact","action","for","row","App","to","data-target","data-toggle","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f2abed8a.chunk.js","sourcesContent":["import React ,{Component } from 'react';\n\nclass About extends Component{\n    render(){\n        return (\n            <div className=\"row\">\n            <div className=\"col-md-12 jumbotron\">\n            <h1 className=\"text-center\"> About Us</h1> \n            \n            <h2 className=\"text-center\"><u> OUR STORY </u></h2>\n            </div>\n            <div className=\"col-md-12  \">\n            <p className=\" text-bold well\">\n       This is a sample web Application ..musics taken from spotify \n</p>\n            </div>\n\n            </div>\n        );\n    }\n}\nexport default About;","import React, { Component } from 'react';\n\nclass Search extends Component {\n    state = { artistQuery: '' };\n\n    searchArtist = () => {\n        this.props.search(this.state.artistQuery);\n    };\n\n    handleKeyPress = event => {\n        if (event.key === 'Enter') {\n            this.searchArtist();\n        }\n    };\n    updateArtistHistory = event => {\n        this.setState({ artistQuery: event.target.value });\n    };\n\n    render() {\n        return (\n            <div className=\"row\">\n                <div className=\"col-md-12 well text-center\">\n                    <div className=\"form-group\">\n                        <input type=\"search\" className='form-control' placeholder=\"Search Here for an artist\" onChange={this.updateArtistHistory} onKeyPress={this.handleKeyPress} />\n                    </div>\n                    <div className=\"form-group\">\n                        <button className=\"btn btn-primary\" onClick={this.searchArtist}>Search</button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Search;","import React from 'react';\n\nconst Artist = ({ artist }) => {\n    if (!artist) return null;\n\n    const { name, followers, genres, images } = artist;\n    return (\n        <div className=\"row\">\n            <div className=\"col-md-10 col-md-offset-1 col-sm-12 col-xs-12\">\n                <div className=\"panel panel-pimary\">\n                    <div className=\"panel-heading\">\n                        <h1 className=\"text-center\">\n                            {name}\n                        </h1>\n                    </div>\n                    <div className=\"panel-body\">\n                        <img src={images[0] && images[0].url} style={{ width: 300 }} alt=\"\" className=\"img-responsive img-thumbnail text-center\" />\n                        <hr />\n                        <ul className=\"list-group\">\n                            <li className=\"list-group-item\">Followers <span className=\"pull-right\">{followers.total}</span></li>\n                            <li className=\"list-group-item\">Geners <span className=\"pull-right\">{genres.join(',')}</span></li>\n                        </ul>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Artist;","import React, { Component } from 'react';\n\nclass Track extends Component {\n\n    state = {\n        playing: false,\n        audio: null,\n        playingPreviewUrl: null\n    }\n\n    //audio player play pause control logic\n    playAudio = previewUrl => () => {\n\n        const audio = new Audio(previewUrl);\n\n        if (!this.state.playing) {\n            //playing controll of audio\n            audio.play();\n            this.setState({ playing: true, audio, playingPreviewUrl: previewUrl });\n        } else {\n            //audio player has to pause \n            this.state.audio.pause();\n\n            //pause and play logic \n            if (this.state.playingPreviewUrl === previewUrl) {\n                this.setState({ playing: false });\n            }\n            else {\n                //from pause to play\n                audio.play();\n                this.setState({ audio, playingPreviewUrl: previewUrl });\n            }\n        }\n    }\n    //audio player play pause control logic ends\n\n    //audio player icon control\n    trackIcon = track => {\n        if (!track.preview_url) {\n            return <span className=\"text-danger\">N/A</span>\n        }\n        if (this.state.playing && this.state.playingPreviewUrl === track.preview_url) {\n            return <span className=\"glyphicon glyphicon-pause\"></span>\n        }\n        return <span className=\"glyphicon glyphicon-play\"></span>\n    }\n    render() {\n        const { tracks } = this.props;\n        return (\n            <div className=\"row\">\n    \n                {tracks.map(track => {\n                    const { id, name, album, preview_url } = track;\n\n                    return (\n                        <div key={id} onClick={this.playAudio(preview_url)} className=\"col-md-6\">\n                            <div className=\"panel panel-info\">\n                                <div className=\"panel-heading\">\n                                    <h1 className=\"panel-title\">{name}</h1>\n                                </div>\n                                <div className=\"panel-body\">\n                                    <img src={album.images[0].url} alt=\"\" className=\"img-responsive img-thumbnail\" />\n                                </div>\n                                <div className=\"panel-footer\">\n                                    <h3 style={{ 'cursor': 'pointer' }}> {this.trackIcon(track)} </h3>\n                                </div>\n                            </div>\n                        </div>\n                    );\n                })\n                }\n\n            </div>\n        );\n    }\n}\n\nexport default Track;","import React, { Component } from 'react';\nimport Search from './sub/Search';\nimport Artist from './sub/Artist';\nimport Track from './sub/Track';\n\nconst API_ADDRESS = 'https://spotify-api-wrapper.appspot.com';\n\nclass Music extends Component {\n    state = { artist: null, tracks: [] };\n    componentDidMount() {\n        this.searchArtist('Ilayaraja');\n    }\n    searchArtist = artistQuery => {\n        fetch(`${API_ADDRESS}/artist/${artistQuery}`).then(response => response.json()).then(json => {\n            console.log(json);\n\n            if (json.artists.total > 0) {\n                const artist = json.artists.items[0];\n                this.setState({ artist });\n\n                //api to call all tracks\n                fetch(`${API_ADDRESS}/artist/${artist.id}/top-tracks`).then(response => response.json()).then(json => {\n                    console.log(json.tracks);\n                    this.setState({ tracks: json.tracks });\n                }).catch(error => alert(console.error.message));\n            }\n\n\n\n        }).catch(error => alert(console.error.message))\n    }\n    render() {\n        return (\n            <div className=\"container\" >\n                <div className=\"row\">\n                    <div className=\"col-md-12 jumbotron text-center\">\n                        <h1>Music </h1>\n                    </div>\n                </div>\n                <Search search={this.searchArtist} ></Search>\n                <Artist artist={this.state.artist}></Artist>\n                <Track tracks={this.state.tracks}></Track>\n\n            </div>\n        );\n    }\n}\n\nexport default Music;","import React ,{Component } from 'react';\n\nclass Contact extends Component{\n    \n    render(){\n        return (\n            <div className=\"row\">\n            <div className=\"col-md-12 jumbotron\">\n            <h1 className=\"text-center r\"> Contact us</h1>\n            </div>\n            <div className=\"col-md-12 jumbotron  \">\n            <form action=\"\" className=\"form-group\">\n            <label for=\"name\"> Name </label>\n            <input type=\"text\" name=\"name\" id=\"name\" className=\"form-control\" placeholder=\"Enter your name\" />\n            \n            <label for=\"email\" > Email</label>\n            <input type=\"email\" name=\"email\" id=\"email\" className=\"form-control\" placeholder=\"enter your email\"/> \n            \n            <label for=\"text-area\">message </label>\n            <textarea row=\"4\" name=\"message\" id=\"message\" className=\"form-control\" placeholder=\"enter your message\" >  </textarea>\n            </form>\n            <button className=\"btn btn-info\"  > submit</button> \n            \n\n \n\n            </div>\n            </div>\n        );\n    }\n}\nexport default Contact;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom'\nimport About from './components/About';\nimport Music from './components/Music';\nimport Contact from './components/Contact';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <nav className=\"navbar navbar-info\">\n          <div className=\"container-fluid\">\n            <div className=\"navbar-header\">\n              <Link to=\"/\" className=\"navbar-brand\">\n                React Music Player\n              </Link>\n              <button className=\"navbar-toggle\" data-target=\"#menu\" data-toggle=\"collapse\">\n                <span className=\"icon-bar\"></span>\n                <span className=\"icon-bar\"></span>\n                <span className=\"icon-bar\"></span>\n              </button>\n            </div>\n            <div className=\"navbar-collapse collapse\" id=\"menu\">\n              <ul className=\"nav navbar-nav\">\n                <li>\n                  <Link to=\"/music\">Music Player</Link>\n                </li>\n                <li>\n                  <Link to=\"/about\">About</Link>\n                </li>\n                <li>\n                  <Link to=\"/contact\">Contact</Link>\n                </li>\n              </ul>\n            </div>\n          </div>\n        </nav>\n        <div className=\"container\">\n          <Switch>\n            <Route exact path=\"/\" component={Music} />\n            <Route exact path=\"/music\" component={Music} />\n            <Route exact path=\"/about\" component={About} />\n            <Route exact path=\"/contact\" component={Contact} />\n          </Switch>\n        </div>\n      </Router>\n\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}